import gradio as gr
import whisper
import tempfile
import os
from notion_client import Client

# Initialize Whisper model
model = None

print("Loading Whisper model...")
try:
    model = whisper.load_model("tiny")
    print("Whisper tiny model loaded successfully!")
except Exception as e:
    print(f"Error loading Whisper model: {e}")
    model = None

# Notion Integration Setup
NOTION_TOKEN = os.getenv("NOTION_TOKEN", "")
NOTION_DATABASE_ID = os.getenv("NOTION_DATABASE_ID", "")

# Initialize Notion client
notion_client = None
if NOTION_TOKEN and NOTION_DATABASE_ID:
    try:
        notion_client = Client(auth=NOTION_TOKEN)
        print("Notion client initialized successfully!")
    except Exception as e:
        print(f"Error initializing Notion client: {e}")

def transcribe_audio(audio_file, meeting_title):
    """Transcribe audio and optionally export to Notion"""
    if model is None:
        return "Error: Whisper model not loaded", ""
    
    if audio_file is None:
        return "Error: No audio file provided", ""
    
    try:
        # Transcribe audio
        print(f"Processing audio file: {audio_file}")
        result = model.transcribe(audio_file, fp16=False, verbose=True)
        
        transcript = result.get("text", "")
        
        if not transcript:
            return "Error: Transcription returned empty result", ""
        
        # Export to Notion if configured
        notion_status = ""
        if notion_client and meeting_title:
            try:
                # Create Notion page
                children = [
                    {
                        "object": "block",
                        "type": "heading_2",
                        "heading_2": {
                            "rich_text": [{"type": "text", "text": {"content": "üìù Meeting Transcript"}}]
                        }
                    },
                    {
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": transcript}}]
                        }
                    }
                ]
                
                response = notion_client.pages.create(
                    parent={"database_id": NOTION_DATABASE_ID},
                    properties={
                        "Name": {
                            "title": [
                                {
                                    "text": {
                                        "content": f"Meeting Notes - {meeting_title}"
                                    }
                                }
                            ]
                        }
                    },
                    children=children
                )
                
                notion_status = f"‚úÖ Successfully exported to Notion! Page ID: {response['id']}"
            except Exception as e:
                notion_status = f"‚ùå Notion export failed: {str(e)}"
        
        return transcript, notion_status
        
    except Exception as e:
        return f"Error during transcription: {str(e)}", ""

def export_to_google_docs(transcript, meeting_title):
    """Format text for Google Docs export"""
    if not transcript:
        return "No transcript to export"
    
    formatted_text = f"""
# {meeting_title or 'Untitled Meeting'}

## Meeting Transcript

{transcript}

---
*Generated by Minute Mate on Hugging Face Spaces*
    """.strip()
    
    return formatted_text

# Create Gradio interface
with gr.Blocks(title="Minute Mate - Audio Transcription & Export") as demo:
    gr.Markdown("# üéôÔ∏è Minute Mate - Audio Transcription & Export")
    gr.Markdown("Upload an audio file to transcribe and export to Notion or Google Docs")
    
    with gr.Row():
        with gr.Column():
            audio_input = gr.Audio(
                label="Upload Audio File",
                type="filepath",
                source="upload"
            )
            title_input = gr.Textbox(
                label="Meeting Title (optional)",
                placeholder="Enter meeting title for Notion export"
            )
            transcribe_btn = gr.Button("üéØ Transcribe & Export to Notion", variant="primary")
        
        with gr.Column():
            transcript_output = gr.Textbox(
                label="Transcription Result",
                lines=10,
                placeholder="Transcribed text will appear here..."
            )
            notion_status = gr.Textbox(
                label="Notion Export Status",
                lines=2,
                placeholder="Notion export status will appear here..."
            )
    
    with gr.Row():
        google_docs_btn = gr.Button("üìÑ Format for Google Docs")
        google_docs_output = gr.Textbox(
            label="Google Docs Formatted Text",
            lines=10,
            placeholder="Formatted text for Google Docs will appear here..."
        )
    
    # Event handlers
    transcribe_btn.click(
        fn=transcribe_audio,
        inputs=[audio_input, title_input],
        outputs=[transcript_output, notion_status]
    )
    
    google_docs_btn.click(
        fn=export_to_google_docs,
        inputs=[transcript_output, title_input],
        outputs=google_docs_output
    )
    
    gr.Markdown("""
    ## üìã How to Use:
    1. **Upload Audio**: Select an audio file (MP3, WAV, M4A, etc.)
    2. **Add Title**: Enter a meeting title for Notion export
    3. **Transcribe**: Click the button to transcribe and export to Notion
    4. **Google Docs**: Format the transcript for Google Docs export
    
    ## ‚ö†Ô∏è Limitations:
    - Audio files should be under 10MB
    - Uses Whisper tiny model for fast processing
    - Notion export requires valid token and database ID
    """)

# Launch the app
if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", server_port=7860) 